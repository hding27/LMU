function [methodinfo,structs,enuminfo,ThunkLibName]=mpcocnv
%MPCOCNV Create structures to define interfaces found in 'Pcocnv'.

%This function was generated by loadlibrary.m parser version 1.1.6.24 on Tue Oct  5 18:31:43 2010
%perl options:'Pcocnv.i -outfile=mpcocnv.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% void *  CREATE_BWLUT ( int bitpix , int min_out , int max_out ); 
fcns.name{fcnNum}='CREATE_BWLUT'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void *  WINAPI CREATE_BWLUT_EX ( int bitpix , int min_out , int max_out , int ialign ); 
fcns.name{fcnNum}='CREATE_BWLUT_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  DELETE_BWLUT ( void * lut ); 
fcns.name{fcnNum}='DELETE_BWLUT'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int  WINAPI DELETE_BWLUT_EX ( void * lut ); 
fcns.name{fcnNum}='DELETE_BWLUT_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void *  CREATE_COLORLUT ( int bitpix , int min_out , int max_out ); 
fcns.name{fcnNum}='CREATE_COLORLUT'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void *  WINAPI CREATE_COLORLUT_EX ( int bitpix , int min_out , int max_out , int ialign ); 
fcns.name{fcnNum}='CREATE_COLORLUT_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  DELETE_COLORLUT ( void * lut ); 
fcns.name{fcnNum}='DELETE_COLORLUT'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int  WINAPI DELETE_COLORLUT_EX ( void * lut ); 
fcns.name{fcnNum}='DELETE_COLORLUT_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void *  CREATE_PSEUDOLUT ( int bitpix , int min_out , int max_out ); 
fcns.name{fcnNum}='CREATE_PSEUDOLUT'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void *  WINAPI CREATE_PSEUDOLUT_EX ( int bitpix , int min_out , int max_out , int ialign ); 
fcns.name{fcnNum}='CREATE_PSEUDOLUT_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  DELETE_PSEUDOLUT ( void * lut ); 
fcns.name{fcnNum}='DELETE_PSEUDOLUT'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int  WINAPI DELETE_PSEUDOLUT_EX ( void * lut ); 
fcns.name{fcnNum}='DELETE_PSEUDOLUT_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void  CONVERT_SET ( void * lut , int min , int max , int typ ); 
fcns.name{fcnNum}='CONVERT_SET'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void  WINAPI CONVERT_SET_EX ( void * lut , int min , int max , int typ , double dgamma ); 
fcns.name{fcnNum}='CONVERT_SET_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% void  WINAPI CONVERT_SET_COL_EX ( void * clut , int rmin , int gmin , int bmin , int rmax , int gmax , int bmax , int typ , double dgamma , double dsaturation ); 
fcns.name{fcnNum}='CONVERT_SET_COL_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double'};fcnNum=fcnNum+1;
% int  LOAD_PSEUDO_LUT ( void * plut , int format , char * filename ); 
fcns.name{fcnNum}='LOAD_PSEUDO_LUT'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI LOAD_PSEUDO_LUT_EX ( void * plut , int format , char * filename ); 
fcns.name{fcnNum}='LOAD_PSEUDO_LUT_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  CONV_BUF_12TO8 ( int mode , int width , int height , word * b12 , byte * b8 , void * lut ); 
fcns.name{fcnNum}='CONV_BUF_12TO8'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int  CONV_BUF_12TO24 ( int mode , int width , int height , word * b12 , byte * b24 , void * lut ); 
fcns.name{fcnNum}='CONV_BUF_12TO24'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int  CONV_BUF_12TOCOL ( int mode , int width , int height , word * gb12 , byte * gb8 , void * clut ); 
fcns.name{fcnNum}='CONV_BUF_12TOCOL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int  WINAPI CONV_BUF_12TOCOL_EX ( int mode , int width , int height , word * gb12 , byte * gb8 , void * clut ); 
fcns.name{fcnNum}='CONV_BUF_12TOCOL_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int  CONV_BUF_12TOPSEUDO ( int mode , int width , int height , word * gb12 , byte * gb8 , void * plut ); 
fcns.name{fcnNum}='CONV_BUF_12TOPSEUDO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int  WINAPI CONV_BUF_12TOPSEUDO_EX ( int mode , int width , int height , word * gb12 , byte * gb8 , void * plut ); 
fcns.name{fcnNum}='CONV_BUF_12TOPSEUDO_EX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int  WINAPI CONV_BUF_16TOCOL16 ( int mode , int width , int height , word * gb16in , word * gb16out , void * clut ); 
fcns.name{fcnNum}='CONV_BUF_16TOCOL16'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int  WINAPI AUTOBALANCE ( int mode , int iwidth , int iheight , word * gb16in , void * collut , BOOL bdouble , int ilowerlimitprz , int iupperlimitprz , int idarkoffset , SHORT * sredgain , SHORT * sgreengain , SHORT * sbluegain ); 
fcns.name{fcnNum}='AUTOBALANCE'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'error', 'int32', 'int32', 'int32', 'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
methodinfo=fcns;